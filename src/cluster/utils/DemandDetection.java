package cluster.utils;

import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;

import com.opencsv.CSVReader;

import cluster.simulator.Main;

public class DemandDetection {
	private int n = 0;
	private ArrayList<Double> m_statistics[] = new ArrayList[2];
	private ArrayList<Double> data = new ArrayList<Double>();
	private double[] m_thresholds;
	private int m_startup;
	private static boolean IS_FIX_THRESHOLD = false;
	public static double[] googleDemand = { 7450.4641119, 7375.7700485, 7640.7702549, 7580.6678038, 7553.2250295,
			7587.0824155, 7605.6046559, 7577.644174, 7537.7774124, 7404.5074362, 7543.1453173, 7505.6597996, 7480.9658479,
			7413.4755924, 7352.7027225, 7513.566043, 7452.1443917, 7446.85923, 7446.788649, 7401.6007425, 7362.2053601,
			7220.9713309, 7330.2845355, 7250.7484434, 7240.3868364, 7222.2560145, 7143.7426585, 7191.0787452, 7390.8417869,
			7404.2948646, 7425.7949916, 7310.4874034, 7495.5056151, 7156.4217532, 7204.2009067, 7235.4433427, 7347.242307,
			7390.8897712, 7385.2304602, 7460.2312296, 7588.3815672, 7602.5603859, 7267.1092517, 7136.2016617, 7147.5984517,
			7145.8219424, 7113.988299, 7257.287223, 7229.670408, 7501.1421599, 7403.0182206, 7497.6034101, 7473.3213866,
			7394.0256482, 7201.0569741, 7212.4874234, 7196.4164068, 7204.007796, 7363.2744409, 7266.4120129, 7463.813755,
			7559.1005702, 7552.2266212, 7506.0409449, 7424.9860629, 7244.5073784, 7119.809291, 7004.7116372, 7193.3573227,
			7193.0187521, 6977.6251536, 7321.1406721, 7252.3094763, 7015.0789686, 6975.5821634, 7281.4478709, 7236.6681509,
			7192.8402109, 7050.9772699, 7147.1733369, 6939.0314256, 6843.6228451, 6881.9620769, 6994.7653746, 6910.3454394,
			6964.4837277, 7077.0204013, 6865.9530064, 6912.5330184, 6911.2463284, 7274.8399973, 6952.1053963, 6870.9770256,
			7011.0590886, 6913.0706456, 6965.5889219, 7147.4586899, 7053.2452129, 7139.1705414, 6952.8900299, 6921.1674162, };
	public static Double test[] = { -0.198505938741642, -1.06829562033707, -0.376302425292711, -1.26563778303559,
			0.970912785237608, 0.673626627168387, -0.229070391149813, -0.267286598491852, -0.0606491191490204,
			-1.06147930634478, -1.01682397187633, 1.74704775506717, 0.911385251735291, -0.865519470621605, -0.222689997752648,
			-0.726953872390259, 0.772929139777866, -1.16812211705501, 1.5840408660248, 0.575681266063653, -0.686766483284739,
			0.378804227760737, -2.09135715484131, -1.02395395602304, 0.600982778743558, -0.323338451736311,
			-0.908289205744784, 0.169385619113426, -0.715781788560222, 0.60704122078446, -0.234412904810582,
			0.0444674249088413, -0.826572830323999, -1.68249701512633, 0.763187058330654, 1.61311063011941, 0.721841245565113,
			-0.298871791218492, 0.784950316556481, 0.28771304482406, -0.512513603187608, -1.2619627884599, -0.174965445157808,
			0.236128675843974, -2.31746618632159, -1.56101257771186, 0.113568391177928, -1.08535574161004, 0.395305640987991,
			-0.0465163575277815, 1.46733836220548, 2.02604576509906, 1.59472598093086, 0.59744453418092, 1.05821708382012,
			0.374995592648228, -0.152183319934612, 0.947186307550902, 0.949364328568514, 0.460240857437936, 0.298052627190531,
			1.05009333360764, 0.277210251981256, 1.20810669774222, 1.97867171984501, 0.89684310644916, 0.377099785644773,
			1.08148909572126, 0.776564103745269, 0.992527331716248 }; // change point:
																																// 50 detected @
																																// 64
	
	
	public static double thresholds[] = { 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999,
			99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 17.57186, 17.12599, 17.07782, 16.90736, 16.9097, 16.88126,
			16.77044, 16.90799, 16.91008, 16.94302, 16.8694, 16.92932, 16.96932, 16.92982, 16.97319, 16.83647, 16.8606,
			16.89542, 16.8821, 16.80551, 16.80513, 16.7978, 16.96925, 16.93361, 16.84694, 16.9808, 16.93759, 17.00627,
			16.8375, 16.75543, 16.77511, 17.03065, 16.94462, 16.98813, 16.98759, 16.92125, 16.96546, 17.14634, 17.00559,
			17.00392, 16.91666, 16.97357, 17.02623, 16.95403, 16.95913, 16.98165, 17.00133, 16.91489, 16.83189, 16.93826,
			17.01458, 16.9852, 16.98623, 17.06599, 16.95264, 16.95752, 17.01527, 16.99582, 17.00931, 17.02785, 17.03827,
			17.03591, 17.04035, 16.86575, 17.06632, 17.12865, 17.19026, 16.90076, 17.12257, 16.96977, 16.91702, 16.9596,
			17.00742, 17.06452, 17.02447, 16.92166, 17.04905, 16.8469, 16.88192, 16.94896, 17.02881, 17.05243, 16.87483,
			16.86862, 16.92787, 16.91316, 17.0158, 16.94451, 17.03469, 16.85953, 16.95697, 17.01951, 17.06054, 17.0095,
			17.07962, 16.88738, 17.01457, 17.05845, 17.14183, 16.88866, 16.91844, 16.96252, 17.05563, 17.02112, 17.11778,
			17.31944, 17.15457, 17.04878, 17.15898, 17.2084, 16.87374, 17.02226, 17.13855, 17.13185, 17.0886, 17.05045,
			16.97158, 17.15339, 17.06035, 17.22802, 17.17721, 17.22057, 17.1247, 16.92217, 16.92325, 16.99733, 17.01301,
			17.11705, 16.94406, 16.96581, 16.89238, 16.89449, 16.90139, 16.93, 17.0374, 16.94887, 17.11092, 17.07855,
			16.94578, 16.97626, 17.20617, 17.07429, 17.03172, 16.94677, 16.92932, 17.17704, 17.07006, 17.05528, 16.99671,
			17.1527, 17.21794, 16.873, 17.00669, 16.97209, 17.04869, 17.07429, 17.06914, 17.16545, 17.25426, 17.14088,
			17.04572, 16.9371, 16.87631, 17.05311, 17.20306, 17.11288, 17.16288, 16.99652, 17.18183, 17.23383, 17.06813,
			16.98486, 17.1272, 17.00433, 17.0513, 16.90903, 17.03275, 17.0091, 16.98415, 16.96803, 17.04537, 17.02761,
			17.20567, 17.02072, 17.15972, 17.03056, 17.0261, 17.04616, 16.99658, 17.06949, 17.01493, 17.01184, 17.11022,
			16.96677, 17.00676, 16.89192, 17.03867, 17.06095, 16.97606, 17.11783, 17.23005, 17.1013, 17.05579, 17.18413,
			17.20487, 17.11616, 17.28181, 17.11964, 17.11433, 16.99704, 16.9631, 17.10343, 17.06869, 17.04696, 17.03629,
			17.0422, 17.18547, 16.98838, 17.08973, 17.01932, 17.0125, 17.0401, 17.10005, 17.0379, 16.91731, 16.9395, 16.89442,
			17.18698, 17.1368, 17.03322, 16.96448, 16.8844, 17.21467, 17.20414, 17.06948, 17.20011, 17.06598, 16.93054,
			17.06507, 17.1665, 17.17554, 17.16315, 17.08972, 17.1929, 17.01362, 16.97893, 16.92702, 16.99959, 17.04986,
			17.11413, 16.99482, 16.97992, 17.03268, 17.09812, 17.00819, 17.05448, 17.28166, 17.13409, 17.1008, 17.26877,
			17.19397, 16.9876, 17.27078, 17.27457, 17.1841, 17.0509, 17.19369, 16.90957, 16.97797, 17.04612, 17.30009,
			17.21425, 17.2375, 17.01719, 17.10326, 17.24241, 17.0254, 17.05376, 17.2457, 17.05125, 17.03302, 16.95771,
			17.07383, 17.27076, 17.07389, 16.97441, 17.06628, 16.98348, 17.18641, 17.08681, 17.1322, 16.97711, 16.87542,
			16.93969, 16.97126, 16.9628, 16.89127, 17.10565, 17.07692, 17.21173, 17.26764, 17.10089, 17.03165, 16.9794,
			17.2372, 17.19271, 17.14793, 16.99685, 17.24999, 16.96848, 17.13482, 17.17805, 16.95356, 16.98831, 16.88594,
			17.15252, 17.21584, 17.16655, 17.19611, 17.10294, 17.2027, 17.00332, 16.7994, 17.05729, 17.00447, 17.24919,
			17.27713, 17.07678, 16.93854, 17.03648, 17.02031, 17.02553, 17.06518, 17.00671, 17.06161, 17.14579, 17.15664,
			17.09302, 17.13877, 17.12421, 16.93545, 16.9668, 17.25893, 17.06528, 17.12748, 17.06543, 17.13925, 17.05723,
			17.01262, 17.11331, 17.09008, 16.99383, 17.18963, 16.98326, 17.29757, 17.28642, 17.11579, 17.01792, 16.92182,
			16.99496, 16.99153, 17.15616, 17.24908, 17.20241, 17.32584, 17.1112, 17.16831, 16.93791, 17.11069, 16.93302,
			16.87947, 16.93065, 16.96325, 16.90354, 17.05065, 16.96913, 17.11976, 16.96016, 16.98338, 16.97781, 16.86826,
			16.8206, 16.85085, 16.9583, 16.97451, 17.1855, 17.35783, 17.26731, 17.20617, 17.4032, 16.9364, 16.9343, 16.91837,
			17.05444, 17.21315, 17.03359, 17.38856, 17.23103, 17.1499, 16.84457, 17.10759, 16.96139, 17.02476, 17.10729,
			17.11922, 16.87935, 17.25456, 16.99419, 16.82445, 16.98193, 17.11196, 16.87269, 17.04783, 16.99532, 16.97872,
			17.03978, 16.8137, 16.94014, 17.19067, 17.19226, 17.04663, 16.97003, 17.023, 17.204, 17.13851, 17.08954, 17.08794,
			17.13324, 17.02825, 16.91307, 16.85899, 17.00914, 16.96446, 16.98099, 17.20847, 17.00783, 16.90645, 16.84556,
			16.83478, 17.0766, 17.08305, 17.13592, 17.06752, 17.11551, 17.14627, 17.14314, 17.18919, 17.00997, 17.19878,
			17.27316, 17.22768, 17.17289, 17.04588, 16.76975, 17.09681, 17.04034, 17.13181, 17.35161, 16.9206, 17.16197,
			17.262, 17.06114, 17.30274, 17.12117, 17.30418, 17.14312, 17.02796, 16.86212, 17.01804, 16.85299, 16.72047,
			17.19562, 17.20726, 17.00829, 17.14798, 17.17986, 16.86326, 16.91444, 17.11749, 17.10889, 16.91402, 17.15286,
			17.11718, 16.91392, 17.03111, 17.20394, 16.97974, 17.19358, 17.00055, 17.20779, 17.2036, 17.02372, 16.92904,
			17.08865, 17.24361, 16.98864, 17.03752, 16.83023, 16.86136, 17.07383, 17.05123, 16.92264, 17.22055, 17.12997,
			17.07189, 17.26362, 17.56117, 17.27797, 17.2602, 17.217, 17.13651, 17.27405, 17.16798, 17.07029, 17.31469,
			17.10677, 16.96919, 17.13271, 16.86306, 16.91376, 17.15305, 17.02293, 16.99885, 17.10483, 17.36599, 17.00394,
			17.00758, 16.9317, 16.80244, 16.93872, 16.82875, 17.10749, 17.01577, 17.16227, 17.18392, 17.20035, 16.98321,
			17.06304, 16.82809, 17.00454, 17.17797, 17.12403, 17.06102, 16.90573, 16.82693, 17.15529, 17.12526, 17.25403,
			17.0884, 16.91031, 17.06828, 17.20151, 17.03922, 17.21157, 17.28733, 17.12353, 17.14813, 17.16962, 17.26751,
			17.35038, 17.02254, 17.0391, 16.93535, 16.88941, 16.97523, 16.90185, 16.76398, 17.14707, 17.2124, 17.04556,
			16.85756, 16.96098, 17.10953, 17.17452, 17.11231, 17.19596, 16.95428, 17.06869, 16.9526, 17.03861, 17.25524,
			17.03339, 17.25455, 17.29357, 17.01603, 17.11973, 17.0919, 17.00751, 17.10623, 17.43457, 17.18973, 17.17692,
			17.06085, 16.84194, 17.09566, 17.07815, 17.08833, 17.05655, 16.83643, 17.37678, 17.25845, 17.30048, 17.20815,
			17.24017, 17.01207, 16.93778, 16.82943, 16.79987, 16.85199, 17.05065, 17.00083, 17.44804, 17.15906, 17.11397,
			17.07301, 17.10738, 17.03049, 16.90898, 17.07145, 17.13716, 16.94683, 17.05804, 16.99109, 17.2272, 16.92964,
			17.13736, 17.03888, 17.15557, 17.05048, 17.20844, 17.2923, 16.90491, 17.26088, 17.51689, 17.26285, 17.17389,
			17.04174, 17.13948, 17.02255, 16.93256, 16.8639, 17.10074, 16.79575, 16.93329, 16.97998, 16.9977, 17.08651,
			16.96729, 16.98932, 17.03946, 17.09255, 17.20864, 17.07584, 17.18591, 17.20654, 17.0366, 17.08518, 17.11141,
			17.14128, 17.07366, 17.10041, 17.34743, 17.07489, 17.02444, 16.98254, 17.28378, 17.02609, 17.13888, 17.34888,
			16.96822, 16.92064, 16.86917, 16.96676, 17.17244, 16.88945, 17.06087, 17.10235, 17.28955, 17.14069, 17.29092,
			17.21907, 17.18955, 17.03202, 17.04869, 17.31307, 17.40028, 17.15539, 17.08406, 16.87043, 17.13016, 16.88858,
			17.38995, 17.37861, 17.46394, 17.23722, 17.2416, 17.27357, 17.16689, 17.45846, 17.17089, 16.88728, 16.75848,
			16.83736, 17.02372, 16.94092, 17.02079, 16.9821, 17.33704, 17.17899, 16.94404, 16.93657, 17.13261, 17.32932,
			17.07292, 17.05324, 17.04742, 17.33486, 16.94942, 16.90195, 17.07114, 17.33026, 17.06687, 16.99155, 17.38331,
			17.06678, 17.21108, 16.91765, 17.21168, 16.9832, 17.15717, 16.8442, 16.93994, 17.0546, 17.12796, 16.72697,
			16.80488, 16.7534, 17.3442, 16.76534, 17.04855, 17.18495, 17.21477, 17.13128, 17.1819, 17.14857, 16.85631,
			16.95639, 17.36663, 16.98319, 16.99142, 17.06326, 16.78417, 16.85858, 17.06937, 16.93309, 17.04043, 16.83342,
			16.80398, 16.90267, 17.13809, 17.16141, 16.87619, 17.33737, 17.21294, 17.02368, 17.04229, 17.13487, 17.27042,
			17.04915, 17.20148, 17.33575, 17.55978, 17.19838, 17.14702, 16.91224, 17.32366, 17.21761, 17.09592, 17.24427,
			16.93676, 16.86745, 16.87779, 17.25828, 17.2841, 17.24552, 17.40825, 17.27046, 17.14867, 17.21451, 16.95373,
			16.82877, 17.1089, 17.09029, 17.32376, 17.04482, 16.94073, 17.21551, 16.99955, 17.15826, 17.02662, 16.85104,
			17.00609, 17.09199, 17.601, 17.11585, 17.27155, 17.21621, 17.07089, 17.21343, 17.06387, 16.89165, 17.17747,
			17.06312, 17.00081, 17.35813, 17.35476, 17.22521, 17.22809, 17.1466, 17.03818, 17.11806, 16.86241, 16.90302,
			17.74214, 17.33513, 17.47029, 17.17816, 17.11116, 16.90785, 16.8092, 17.24824, 17.48457, 17.56247, 17.1614,
			17.0788, 17.2212, 17.15265, 17.08157, 16.99538, 17.14805, 16.89129, 17.46832, 16.82299, 17.2635, 16.83063,
			16.8718, 16.74969, 17.20041, 17.22501, 17.53443, 17.00913, 17.11348, 17.29622, 17.28622, 17.01266, 16.94931,
			17.3364, 17.13766, 16.85388, 17.04527, 17.26876, 16.89487, 16.92871, 16.89498, 16.82566, 16.74425, 16.8873,
			17.04831, 16.87773, 16.75117, 16.96774, 16.74247, 17.08936, 16.9581, 16.82376, 17.1096, 16.68248, 16.50106,
			16.97345, 17.13244, 17.03285, 17.35657, 17.13911, 17.1266, 17.26461, 17.4381, 17.33603, 17.19759, 17.27221,
			16.88794, 16.74013, 16.49164, 16.97632, 16.83805, 16.91799, 17.04256, 17.19655, 17.05283, 17.35664, 17.40739,
			17.08016, 17.17213, 16.63103, 17.08275, 16.62376, 16.88079, 16.85236, 17.08206, 17.12852, 17.18937, 17.23141,
			17.13482, 17.39196, 17.25459, 16.79657, 17.44716, 17.26993, 17.10919, 16.84302, 17.07173, 16.78621, 16.87695,
			17.20202, 17.08533, 16.89349, 17.08129, 17.36672, 17.41163, 17.09391, 17.16224, 17.14895, 16.94578, 16.93909,
			17.13797, 17.13308, 16.92529, 16.83338, 17.07474, 16.98488, 17.13004, 16.99117, 16.84235, 16.77406, 16.79673,
			16.747, 17.17658, 17.09965, 17.03413, 16.58933, 16.99812, 17.53978, 17.48647, 17.25925, 17.09238, 17.34983,
			17.12101, 16.75537, 16.66898, 16.90904, 16.94451, 16.91914, 16.69062, 17.08037, 17.03526, 17.1154, 16.99095,
			16.66351, 16.57142, 17.13076, 16.92047, 16.87323, 16.81134, 17.02096, 17.18984, 17.1401, 17.174, 16.55286,
			16.91247, 17.25558, };

	public static int demandDetect(double[] observations) {
		return 0;
	}

	public DemandDetection(double[] thresholds, int startup) {
		this.m_thresholds = thresholds;
		this.m_startup = startup;
		m_statistics[0] = new ArrayList<Double>();
		this.m_statistics[1] = new ArrayList<Double>();
	}

	public int detectChange(ArrayList<Double> x, ArrayList<Double> Us) {
		double U = 0;
		int maxind = 0;
		int dt = 0;
		int cp = 0;
		int sz = x.size();

		double threshold = 0;
		int thresholdLength = m_thresholds.length;
		for (int i = 0; i < sz; i++) {
			this.processPoint(x.get(i));
			if (n >= m_startup) {
				this.cpmMLE();
				U = this.maxValue;
				maxind = this.maxIndex;
				Us.add(U);

				if (thresholdLength == 0) {
					threshold = 9999999.0;
				} else if (n >= thresholdLength) {
					threshold = m_thresholds[thresholdLength - 1];
				} else {
					threshold = m_thresholds[n - 1];
				}
				if (IS_FIX_THRESHOLD)
					threshold = THRESHOLD;

				if (U > threshold) {
					dt = i + 1;
					cp = maxind + 1;
//					System.out.println("change point " + cp);
//					System.out.println("detected time " + dt);
					return cp;
				}
			} else {
				Us.add(0.0);
			}
		}
		return -1;
	}

	// returns the maximum value, and its index
	double maxValue;
	int maxIndex;

	
	public double THRESHOLD = 17.5;

	// returns the maximum value, and its index
	public void cpmMLE() {
		if (n < m_startup) {
			return;
		}

		ArrayList<Double> Us = new ArrayList<Double>();
		// Us.reserve(n);
		this.cpmMLEaux(Us);

		this.maxIndex = -1;
		this.maxValue = -999999;

		int sz = Us.size();
		for (int i = 1; i < sz - 2; i++) {
			if (Us.get(i) > this.maxValue) {
				this.maxValue = Us.get(i);
				this.maxIndex = i;
			}
		}
	}

	private void reset() {
		m_statistics[0].clear();
		m_statistics[1].clear();
		n = 0;
	}

	// nb is 0, only higher if we are using window
	public void cpmMLEaux(ArrayList<Double> Us) {
		int i, n1;
		double mu1, mu2, Sok, Son, Skn, C, G, n2;
		// Us.reserve(m_statistics[0].size());
		int sz = m_statistics[0].size();
		Us.add(0.0);
		for (i = 1; i < sz - 2; i++) {
			n1 = i + 1;
			n2 = n - n1;
			// mean of first part
			mu1 = this.m_statistics[0].get(n1 - 1) / (double) n1;
			// mean of second part
			mu2 = (m_statistics[0].get(n - 1) - m_statistics[0].get(n1 - 1)) / (n2);

			Sok = m_statistics[1].get(n1 - 1) / (double) n1; // MLE of variance 0 ~ k
			Son = m_statistics[1].get(n - 1) / (double) n; // MLE of variance 0 ~ n
			Skn = m_statistics[1].get(n - 1) - m_statistics[1].get(n1 - 1) - (n1 * (n - n1) * (mu1 - mu2) * (mu1 - mu2)) / n;
			Skn = Skn / (double) n2; // MLE of variance k ~ n

			// C is the barlet correction vector
			C = 1 + 11 / (double) 12 * (1 / (double) n1 + 1 / (double) n2 - 1 / (double) n)
					+ (1 / (double) (n1 * n1) + 1 / (double) (n2 * n2) - 1 / (double) (n * n));

			// GLR
			G = (n1 * Math.log(Son / Sok) + n2 * Math.log(Son / Skn)) / C;
			Us.add(G);
		}
		Us.add(0.0);
		Us.add(0.0);
	}

	private void processPoint(double obs) {
		n++;
		updateStatistics(obs); // add to window
	}

	public void processStream(ArrayList<Double> x, ArrayList<Double> Us) {
		double U;
		int maxind, dt, cp, i;
		int lastChange = 0;
		int sz = x.size();

		double threshold = 0;
		int thresholdLength = this.m_thresholds.length;
		i = -1;
		while (i < sz - 1) {
			++i;
			// Rprintf("i:%d len:%d\n",i,(int)x.size());
			this.processPoint(x.get(i));

			if (n >= m_startup) {
				this.cpmMLE();
				U = this.maxValue;
				maxind = this.maxIndex;
				// Us.push_back(U);

				if (thresholdLength == 0) {
					threshold = 99999.0;
				} else if (n >= thresholdLength) {
					threshold = m_thresholds[thresholdLength - 1];
				} else {
					threshold = m_thresholds[n - 1];
				}

				// change found, we must reset
				if (U > threshold) {
					dt = i + 1;
					cp = lastChange + maxind + 1;
					lastChange = cp;
					i = cp - 1; // start from observation after change
					// dts.push_back(dt);
					// cps.push_back(cp);
					System.out.println("detected " + cp + " at " + dt);
					this.reset();
				}
			} else {
				// Us.push_back(0);
			}
		}
	}

	public int onlineDetect(double x, ArrayList<Double> Us) {
		double U;
		int maxind, dt, cp, i;
		int lastChange = 0;
		this.data.add(x);
		int sz = this.data.size();

		double threshold = 0;
		int thresholdLength = this.m_thresholds.length;
		i = -1;
		while (i < sz - 1) {
			++i;
			this.processPoint(x);
			if (n >= m_startup) {
				this.cpmMLE();
				U = this.maxValue;
				maxind = this.maxIndex;

				if (thresholdLength == 0) {
					threshold = 99999.0;
				} else if (n >= thresholdLength) {
					threshold = m_thresholds[thresholdLength - 1];
				} else {
					threshold = m_thresholds[n - 1];
				}
				
				if (IS_FIX_THRESHOLD)
					threshold = THRESHOLD;

				// change found, we must reset
				if (U > threshold) {
					dt = i + 1;
					cp = lastChange + maxind + 1;
					lastChange = cp;
					// i = cp - 1; // start from observation after change
					ArrayList<Double> newData = new ArrayList<Double>();
					for (int j = cp; j < this.data.size(); j++) {
						newData.add(this.data.get(j));
					}
					this.data = newData;
					// dts.push_back(dt);
					// cps.push_back(cp);
//					System.out.println("detected " + cp + " at " + dt);
					this.reset();
					return cp;
				}
			} else {
				// Us.push_back(0);
			}
		}
		return -1;
	}

	public double[] loadThreshHolds(int ARL0, int len) {
		// TODO: if (len< desiredLength) refer loadThresholds.R
		return thresholds;
	}

	private void updateStatistics(double obs) {
		double S = obs;
		double W = 0;
		if (m_statistics[0].size() > 0) {
			// sum of all elements
			S = obs + m_statistics[0].get(m_statistics[0].size() - 1);
			// The change of new observation X (n-1)
			double temp = (n - 1) * obs - m_statistics[0].get(m_statistics[0].size() - 1);
			W = m_statistics[1].get(m_statistics[1].size() - 1) + temp * temp / (n * (n - 1)); // variance
		}
		m_statistics[0].add(S);
		m_statistics[1].add(W);
	}
	
	private ArrayList<Double> loadAzure(String csvFile, int userId){
		ArrayList<Double> utils = new ArrayList<Double>();
		try {
      // BufferedInputStream bufferedInputStream = new BufferedInputStream(new FileInputStream("myFile.csv"));
       CSVReader csvReader = new CSVReader(new InputStreamReader
               (new BufferedInputStream(new FileInputStream(csvFile), 8192 * 32)));
       try {
           int count = 0;
           String[] line;
           long timeStart = System.nanoTime();
           while((line = csvReader.readNext()) != null){
               count ++;
               if(count >= 150000){
                   break;
               }
               double util = Double.parseDouble(line[userId]);
               utils.add(util);
           }
           long timeEnd = System.nanoTime();
           System.out.println("Count: " + count);
           System.out.println("Time: " + (timeEnd - timeStart) * 1.0 / 1000000000 + " sec");
       } catch (IOException e) {
           e.printStackTrace();
       }
   } catch (FileNotFoundException e) {
       System.out.println("File not found");
   }
		return utils;
	}

	
	public static void main(String[] args) {
		int startup = 50;
		DemandDetection dm = new DemandDetection(DemandDetection.thresholds, startup);
		ArrayList<Double> data =  new ArrayList<Double>();
		ArrayList<Double> Dsv = new ArrayList<Double>();
//		Double x[] = Randomness.genChangePointTestValues(500, 6000, 10, 500, 2000, 10);
//		Double x[] = DemandDetection.test;
//		 data.addAll(Arrays.asList(x));
//		 dm.detectChange(data, Dsv);
		
//		dm.processStream(data, Dsv);
		 
		 // ONLINE DETECTION
		ArrayList<Double> x = dm.loadAzure("/home/tanle/projects/AzurePublicDataset/cpu_utils_86400.csv", 4000-1);
		int currentCp = 0;		
		for (int i = 0; i < x.size(); i++) {
			data.add(x.get(i));
			int cp = dm.detectChange(data, Dsv);
			if (cp> 0){
				ArrayList<Double> newData = new ArrayList<Double>();
				for (int j = cp; j < data.size(); j++) {
					newData.add(data.get(j));
				}
				currentCp = currentCp + cp;
				System.out.println("change point " + currentCp + " detected at " + (i+1));
				dm.reset();
				data = newData;
			}
			dm.reset();	
		}
		System.out.println(x);
	}
}
